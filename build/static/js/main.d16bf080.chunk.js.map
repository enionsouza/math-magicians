{"version":3,"sources":["components/Button.js","logic/operate.js","components/Calculator.js","logic/calculate.js","App.js","index.js"],"names":["Button","action","label","cssClass","cssStyle","type","style","onClick","className","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","err","mod","Error","Calculator","useState","total","next","state","setState","onClickHandler","e","obj","buttonName","target","innerHTML","match","includes","parseFloat","utils","map","utilLabel","index","gridArea","digits","digitLabel","operators","operatorLabel","App","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d16bf080.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Button = ({\n  action, label, cssClass, cssStyle,\n}) => (\n  <button type=\"button\" style={cssStyle} onClick={action} className={cssClass}>{label}</button>\n);\n\nButton.propTypes = {\n  action: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  cssClass: PropTypes.string.isRequired,\n  cssStyle: PropTypes.string.isRequired,\n};\n\nexport default Button;\n","import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    try {\n      return one.div(two).toString();\n    } catch (err) {\n      return \"Can't divide by 0.\";\n    }\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import { useState } from 'react';\nimport Button from './Button';\nimport calculate from '../logic/calculate';\n\nconst Calculator = () => {\n  const [state, setState] = useState(\n    {\n      total: null,\n      next: null,\n    },\n  );\n\n  const onClickHandler = (e) => {\n    setState((state) => calculate(state, e.target.innerHTML));\n  };\n\n  const utilLabels = ['AC', '+/-', '%'];\n  const digitLabels = [7, 8, 9, 4, 5, 6, 1, 2, 3, 0, '.'];\n  const operatorLabels = ['รท', 'x', '-', '+', '='];\n  const { total, next } = state;\n\n  const utils = utilLabels.map(\n    (utilLabel, index) => (\n      <Button\n        key={`${utilLabel}`}\n        cssStyle={{ gridArea: `util-${index}` }}\n        cssClass=\"util\"\n        action={onClickHandler}\n        label={utilLabel}\n      />\n    ),\n  );\n  const digits = digitLabels.map(\n    (digitLabel, index) => (\n      <Button\n        key={`${digitLabel}`}\n        cssStyle={{ gridArea: `digit-${index}` }}\n        cssClass=\"digit\"\n        action={onClickHandler}\n        label={digitLabel}\n      />\n    ),\n  );\n  const operators = operatorLabels.map(\n    (operatorLabel, index) => (\n      <Button\n        key={`${operatorLabel}`}\n        cssStyle={{ gridArea: `operator-${index}` }}\n        cssClass=\"operator\"\n        action={onClickHandler}\n        label={operatorLabel}\n      />\n    ),\n  );\n  return (\n    <div className=\"grid\">\n      <div style={{ gridArea: 'display' }} className=\"display\">{ next || total || '0' }</div>\n      {utils}\n      {digits}\n      {operators}\n    </div>\n  );\n};\n\nexport default Calculator;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { ...obj, next: obj.next + buttonName };\n      }\n      return { ...obj, next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return { ...obj };\n      }\n      return { ...obj, next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { ...obj, next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { ...obj, total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation after pressing '='\n  if (!obj.next && obj.total && !obj.operation) {\n    return { ...obj, operation: buttonName };\n  }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    if (obj.total && !obj.next) {\n      return { ...obj, operation: buttonName };\n    }\n\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","/* eslint-disable react/prefer-stateless-function */\nimport React from 'react';\nimport Calculator from './components/Calculator';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app-container\">\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}