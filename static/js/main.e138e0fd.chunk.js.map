{"version":3,"sources":["components/Button.js","logic/operate.js","logic/calculate.js","components/Calculator.js","pages/Home.js","pages/Quote.js","App.js","components/NavBar.js","index.js"],"names":["Button","action","label","cssClass","cssStyle","type","style","onClick","className","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","err","mod","Error","calculateWrapper","obj","buttonName","computedObj","total","next","match","includes","parseFloat","calculate","Calculator","useState","state","setState","onClickHandler","e","target","classList","contains","innerHTML","utils","map","utilLabel","index","gridArea","digits","digitLabel","operators","operatorLabel","Home","padding","justifySelf","alignSelf","href","rel","Quote","App","exact","path","display","justifyContent","paddingRight","NavBar","id","text","link","to","activeClassName","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"gQAiBeA,EAfA,SAAC,GAAD,IACbC,EADa,EACbA,OAAQC,EADK,EACLA,MAAOC,EADF,EACEA,SAAUC,EADZ,EACYA,SADZ,OAGb,wBAAQC,KAAK,SAASC,MAAOF,EAAUG,QAASN,EAAQO,UAAWL,EAAnE,SAA8ED,K,wBCHjE,SAASO,EAAQC,EAAWC,EAAWC,GACpD,IAAMC,EAAMC,IAAIJ,GACVK,EAAMD,IAAIH,GAChB,GAAkB,MAAdC,EACF,OAAOC,EAAIG,KAAKD,GAAKE,WAEvB,GAAkB,MAAdL,EACF,OAAOC,EAAIK,MAAMH,GAAKE,WAExB,GAAkB,MAAdL,EACF,OAAOC,EAAIM,MAAMJ,GAAKE,WAExB,GAAkB,SAAdL,EACF,IACE,OAAOC,EAAIO,IAAIL,GAAKE,WACpB,MAAOI,GACP,MAAO,qBAGX,GAAkB,MAAdT,EACF,IACE,OAAOC,EAAIS,IAAIP,GAAKE,WACpB,MAAOI,GACP,MAAO,qBAGX,MAAME,MAAM,sBAAD,OAAuBX,EAAvB,MCuGb,IAMeY,EANU,SAACC,EAAKC,GAC7B,IAAMC,EApHR,SAAmBF,EAAKC,GACtB,MAAmB,OAAfA,EACK,CACLE,MAAO,KACPC,KAAM,KACNjB,UAAW,MAIFc,EAtBCI,MAAM,UAuBC,MAAfJ,GAAmC,MAAbD,EAAII,KACrB,GAGLJ,EAAIb,UACFa,EAAII,KACC,2BAAKJ,GAAZ,IAAiBI,KAAMJ,EAAII,KAAOH,IAE7B,2BAAKD,GAAZ,IAAiBI,KAAMH,IAGrBD,EAAII,KACC,CACLA,KAAMJ,EAAII,KAAOH,EACjBE,MAAO,MAGJ,CACLC,KAAMH,EACNE,MAAO,MAIQ,MAAfF,EACED,EAAII,KACFJ,EAAII,KAAKE,SAAS,KACb,eAAKN,GAEP,2BAAKA,GAAZ,IAAiBI,KAAK,GAAD,OAAKJ,EAAII,KAAT,OAEnBJ,EAAIb,UACC,CAAEiB,KAAM,MAEbJ,EAAIG,MACFH,EAAIG,MAAMG,SAAS,KACd,GAEF,CAAEH,MAAM,GAAD,OAAKH,EAAIG,MAAT,MAET,CAAEC,KAAM,MAGE,MAAfH,EACED,EAAII,MAAQJ,EAAIG,OAASH,EAAIb,UACxB,CACLgB,MAAOnB,EAAQgB,EAAIG,MAAOH,EAAII,KAAMJ,EAAIb,WACxCiB,KAAM,KACNjB,UAAW,MAIR,GAGU,QAAfc,EACED,EAAII,KACC,2BAAKJ,GAAZ,IAAiBI,OAAQ,EAAIG,WAAWP,EAAII,OAAOZ,aAEjDQ,EAAIG,MACC,2BAAKH,GAAZ,IAAiBG,QAAS,EAAII,WAAWP,EAAIG,QAAQX,aAEhD,GAOJQ,EAAII,MAASJ,EAAIG,MAKjBH,EAAII,OAAQJ,EAAIG,OAAUH,EAAIb,UAK/Ba,EAAIb,UACFa,EAAIG,QAAUH,EAAII,KACb,2BAAKJ,GAAZ,IAAiBb,UAAWc,IAGvB,CACLE,MAAOnB,EAAQgB,EAAIG,MAAOH,EAAII,KAAMJ,EAAIb,WACxCiB,KAAM,KACNjB,UAAWc,GAOVD,EAAII,KAKF,CACLD,MAAOH,EAAII,KACXA,KAAM,KACNjB,UAAWc,GAPJ,CAAEd,UAAWc,GApBb,2BAAKD,GAAZ,IAAiBb,UAAWc,IALrB,GAqCWO,CAAUR,EAAKC,GAEnC,OAAO,2BAAKD,GAAQE,ICjEPO,G,MAhEI,WACjB,MAA0BC,mBACxB,CACEP,MAAO,KACPC,KAAM,KACNjB,UAAW,OAJf,mBAAOwB,EAAP,KAAcC,EAAd,KAQMC,EAAiB,SAACC,GACtB,IAAQX,EAAgBQ,EAAhBR,MAAOC,EAASO,EAATP,KACf,OAAKD,GAAUC,IAAQU,EAAEC,OAAOC,UAAUC,SAAS,aACnDL,GAAS,SAACD,GAAD,OAAWH,EAAUG,EAAOG,EAAEC,OAAOG,cACvC,MAFgE,MAQjEf,EAAgBQ,EAAhBR,MAAOC,EAASO,EAATP,KAETe,EALa,CAAC,KAAM,MAAO,KAKRC,KACvB,SAACC,EAAWC,GAAZ,OACE,cAAC,EAAD,CAEE3C,SAAU,CAAE4C,SAAS,QAAD,OAAUD,IAC9B5C,SAAS,OACTF,OAAQqC,EACRpC,MAAO4C,GALT,UACUA,OAQRG,EAfc,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAe5CJ,KACzB,SAACK,EAAYH,GAAb,OACE,cAAC,EAAD,CAEE3C,SAAU,CAAE4C,SAAS,SAAD,OAAWD,IAC/B5C,SAAS,QACTF,OAAQqC,EACRpC,MAAOgD,GALT,UACUA,OAQRC,EAzBiB,CAAC,OAAK,IAAK,IAAK,IAAK,KAyBXN,KAC/B,SAACO,EAAeL,GAAhB,OACE,cAAC,EAAD,CAEE3C,SAAU,CAAE4C,SAAS,YAAD,OAAcD,IAClC5C,SAAS,WACTF,OAAQqC,EACRpC,MAAOkD,GALT,UACUA,OAQd,OACE,sBAAK5C,UAAU,OAAf,UACE,qBAAKF,MAAO,CAAE0C,SAAU,WAAaxC,UAAU,UAA/C,SAA2DqB,GAAQD,GAAS,MAC3EgB,EACAK,EACAE,OCzCQE,EAvBF,kBACX,sBACE/C,MAAO,CACLgD,QAAS,MACTC,YAAa,SACbC,UAAW,UAJf,UAOE,qDACA,gNAKA,yDAEG,IACD,mBAAGC,KAAK,uBAAuBjB,OAAO,SAASkB,IAAI,aAAnD,qBAHF,WCOWC,EArBD,kBACZ,sBACErD,MAAO,CACLiD,YAAa,SACbC,UAAW,UAHf,UAME,oBAAIhD,UAAU,QAAd,sBACA,yBAAQA,UAAU,QAAlB,UACE,8HAGA,gDAEG,IACD,6DCwBOoD,G,MAhCH,kBACV,mCACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,eAAlB,SACE,sBACExD,MAAO,CACLyD,QAAS,OACTC,eAAgB,UAHpB,UAME,oBACE1D,MAAO,CACL2D,aAAc,QAFlB,iCAOA,qBAAKzD,UAAU,gBAAf,SACE,cAAC,EAAD,WAIN,cAAC,IAAD,CAAOsD,KAAK,UAAZ,SACE,cAAC,EAAD,aCQOI,EAvCA,WAmBb,OACE,sBAAK1D,UAAU,WAAf,UACE,oBAAIA,UAAU,YAAd,4BACA,oBAAIA,UAAU,gBAAd,SArBU,CACZ,CACE2D,GAAI,EACJL,KAAM,IACNM,KAAM,QAER,CACED,GAAI,EACJL,KAAM,eACNM,KAAM,cAER,CACED,GAAI,EACJL,KAAM,UACNM,KAAM,UAQGvB,KAAI,SAACwB,GAAD,OACT,6BACE,cAAC,IAAD,CACEC,GAAID,EAAKP,KACTS,gBAAgB,cAChBV,OAAK,EAHP,SAKGQ,EAAKD,QANDC,EAAKF,a,MCnBxBK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAQC,SAAS,IAAjB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,SAGJC,SAASC,eAAe,W","file":"static/js/main.e138e0fd.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Button = ({\n  action, label, cssClass, cssStyle,\n}) => (\n  <button type=\"button\" style={cssStyle} onClick={action} className={cssClass}>{label}</button>\n);\n\nButton.propTypes = {\n  action: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  cssClass: PropTypes.string.isRequired,\n  cssStyle: PropTypes.shape({\n    gridArea: PropTypes.string,\n  }).isRequired,\n};\n\nexport default Button;\n","import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    try {\n      return one.div(two).toString();\n    } catch (err) {\n      return \"Can't divide by 0.\";\n    }\n  }\n  if (operation === '%') {\n    try {\n      return one.mod(two).toString();\n    } catch (err) {\n      return \"Can't divide by 0.\";\n    }\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\n\nfunction calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { ...obj, next: obj.next + buttonName };\n      }\n      return { ...obj, next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return { ...obj };\n      }\n      return { ...obj, next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { next: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.total && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { ...obj, next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { ...obj, total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  if (!obj.next && !obj.total) {\n    return {};\n  }\n\n  // User pressed an operation after pressing '='\n  if (!obj.next && obj.total && !obj.operation) {\n    return { ...obj, operation: buttonName };\n  }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    if (obj.total && !obj.next) {\n      return { ...obj, operation: buttonName };\n    }\n\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n\nconst calculateWrapper = (obj, buttonName) => {\n  const computedObj = calculate(obj, buttonName);\n\n  return { ...obj, ...computedObj };\n};\n\nexport default calculateWrapper;\n","import { useState } from 'react';\nimport Button from './Button';\nimport calculate from '../logic/calculate';\nimport './Calculator.css';\n\nconst Calculator = () => {\n  const [state, setState] = useState(\n    {\n      total: null,\n      next: null,\n      operation: null,\n    },\n  );\n\n  const onClickHandler = (e) => {\n    const { total, next } = state;\n    if (!total && !next && e.target.classList.contains('operator')) return null;\n    setState((state) => calculate(state, e.target.innerHTML));\n    return null;\n  };\n\n  const utilLabels = ['AC', '+/-', '%'];\n  const digitLabels = ['7', '8', '9', '4', '5', '6', '1', '2', '3', '0', '.'];\n  const operatorLabels = ['รท', 'x', '-', '+', '='];\n  const { total, next } = state;\n\n  const utils = utilLabels.map(\n    (utilLabel, index) => (\n      <Button\n        key={`${utilLabel}`}\n        cssStyle={{ gridArea: `util-${index}` }}\n        cssClass=\"util\"\n        action={onClickHandler}\n        label={utilLabel}\n      />\n    ),\n  );\n  const digits = digitLabels.map(\n    (digitLabel, index) => (\n      <Button\n        key={`${digitLabel}`}\n        cssStyle={{ gridArea: `digit-${index}` }}\n        cssClass=\"digit\"\n        action={onClickHandler}\n        label={digitLabel}\n      />\n    ),\n  );\n  const operators = operatorLabels.map(\n    (operatorLabel, index) => (\n      <Button\n        key={`${operatorLabel}`}\n        cssStyle={{ gridArea: `operator-${index}` }}\n        cssClass=\"operator\"\n        action={onClickHandler}\n        label={operatorLabel}\n      />\n    ),\n  );\n  return (\n    <div className=\"grid\">\n      <div style={{ gridArea: 'display' }} className=\"display\">{ next || total || '0' }</div>\n      {utils}\n      {digits}\n      {operators}\n    </div>\n  );\n};\n\nexport default Calculator;\n","const Home = () => (\n  <div\n    style={{\n      padding: '5em',\n      justifySelf: 'center',\n      alignSelf: 'center',\n    }}\n  >\n    <h2>Welcome to our Page</h2>\n    <p>\n      &quot;Math magicians&quot; is a website for all fans of mathematics.\n      It is a Single Page App (SPA) that allows users to:\n      (1) Make simple calculations, and (2) Read a math-related quote.\n    </p>\n    <p>\n      This app was built using\n      {' '}\n      <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noreferrer\">ReactJS</a>\n      !\n    </p>\n  </div>\n);\n\nexport default Home;\n","const Quote = () => (\n  <div\n    style={{\n      justifySelf: 'center',\n      alignSelf: 'center',\n    }}\n  >\n    <h2 className=\"title\">Quote...</h2>\n    <figure className=\"quote\">\n      <blockquote>\n        &rdquo;It is magic until you understand it, and it is mathematics thereafter...&rdquo;\n      </blockquote>\n      <figcaption>\n        &mdash;\n        {' '}\n        <cite>Bharati Krishna</cite>\n      </figcaption>\n    </figure>\n  </div>\n);\n\nexport default Quote;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Calculator from './components/Calculator';\nimport Home from './pages/Home';\nimport Quote from './pages/Quote';\nimport './App.css';\n\nconst App = () => (\n  <>\n    <Switch>\n      <Route exact path=\"/\">\n        <Home />\n      </Route>\n      <Route exact path=\"/calculator/\">\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n          }}\n        >\n          <h2\n            style={{\n              paddingRight: '10em',\n            }}\n          >\n            Let&apos;s do some math!\n          </h2>\n          <div className=\"app-container\">\n            <Calculator />\n          </div>\n        </div>\n      </Route>\n      <Route path=\"/quote/\">\n        <Quote />\n      </Route>\n    </Switch>\n  </>\n);\n\nexport default App;\n","import { NavLink } from 'react-router-dom';\n\nconst NavBar = () => {\n  const links = [\n    {\n      id: 1,\n      path: '/',\n      text: 'Home',\n    },\n    {\n      id: 2,\n      path: '/calculator/',\n      text: 'Calculator',\n    },\n    {\n      id: 3,\n      path: '/quote/',\n      text: 'Quote',\n    },\n  ];\n\n  return (\n    <nav className=\"nav-menu\">\n      <h1 className=\"nav-title\">Math Magicians</h1>\n      <ul className=\"nav-menu-list\">\n        {links.map((link) => (\n          <li key={link.id}>\n            <NavLink\n              to={link.path}\n              activeClassName=\"active-link\"\n              exact\n            >\n              {link.text}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport NavBar from './components/NavBar';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename=\"/\">\n      <NavBar />\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}